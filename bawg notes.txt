Make separate pages (and links) for flower lists (by color and "all")
with names only (for bandwidth saving) and photos only (for showing off).

Print errors:
  *no color listed
  *listed color not supported
  *broken photo
  no scientific name for leaf page
  multiple scientific names from observations.csv

###############################################################################

how to mass rename files:
for f in *.jpg; do git mv "$f" "$(echo $f | sed 's/-\([-0-9]*\)\.jpg$/,\1.jpg/')"; done

###############################################################################

Create a script to help copy new and changed files to a portable device.
  Copy new and modified files to a new (and git-ignored) folder,
    ready for the user to copy them over using Windows Explorer.
  Record the timestamp of all files to a (git-ignored) database
    to be used next time for identifying new and modified files.
  Deleted files won't be deleted, but they won't cause any harm.
  Include top-level files that should be copied if they are modified,
    e.g. index.html, bafg.css, search.js, pages.js
  Perhaps allow an argument with a date so that all files modified
    after that date are copied in case the database gets screwed up.
  (Explorer displays the photo creation date, but the file modification
    data is still correct internally.)

Should autogenerated families be structured more like top-level lists
(with a complete indented hierarchy)?

Put month info in table format with bar chart.
Put month info side by side with park info (depending on display width?)

/cygdrive/c/Python37/python -m cProfile -s cumtime src/bawg.py | less

Add (optional) color info for unobserved flowers?
How would that be presented?  (border on CalPhoto placeholder?)

Make links up to the key (or any other parent) use an anchor position
that highlights the child's section of the key, similar to the
glossary.  (May require similar positioning tricks.)

Have a way to link from txt to the key to a flower (e.g. for
rough-fruited buttercup in buttercups).
E.g. {-buttercups#rough-fruited buttercup}

If all modified pages are under a single modified parent (excluding
"all" and color lists), bring up that parent page automatically.  (Or
simply list it first, or list the modified pages hierarchically.
Might be able to reuse the html generation for color lists.)

Support color:none for non-flowering plants.  Allow it to be used at
an upper level of hierarchy, from where it automatically propagates
downward through the tree.  (Should I also allow propagation for other
colors?  It could come in handy, e.g. for a genus that is always the
same color.  But it would also make it easy to be sloppy and not
verify the correct color of everything.)

For HTML files, use the scientific name instead of the common name if
possible?  This reduces churn when common names change, but it makes
it harder to find the corresponding txt file.  In any case, common
names don't change often, and scientific names can change, too.

For a line that begins with '[', include an automatic h3 or lower
format on the remainder of the text line.  Use increasing header
numbers based on the bracket depth.  Line breaks remain <br/>.
Recognize this and continue the header, or require that the line be
run together with <br/> in the middle?

Parts of a pea flower:
https://en.wikipedia.org/wiki/Papilionaceous_flower#/media/File:Sesbanea_bispinosa,_crop.jpg

The banner is a single petal, but a crease along its midline may give
the appearance of two petals fused at the edge.


sea muilla:
perianth parts (no obvious corolla/calyx separation)
sepals (in bud, but opening) (no calyx tube)
filaments, anthers, pollen
ovary, style, stigma
pedicels
bracts
peduncle

milk maids:
petals
sepals

buttercup:
petals
sepals
pedicels
bracts
peduncle
anthers
pistil hard to see

sun cup:
petals
sepals
pedicel
anthers, filaments
stigma, style hidden
bracts out of view

field bindweed (2 photos)
petals
calyx (sepals indistinct)
pedicel
ovary/style/stigma
filaments/anthers

yellow mariposa lily: (2 photos; bawg photos are good)
petals
sepals
anthers, filaments
stigma, ovary
pedicel
no bracts

pale flax
good side view down to bracts
top view shows all the parts, but is too crowded to label


Add glossary entries to replace as many Jepson terms as I can.  If I
can get all of them, then perhaps I can make use of a Jepson term an
error.


Apply standard page substitutions on glossary pages, e.g. blank lines
to <p/>.

Add inflorescence shape definitions for sedges.  (Possibly share the
glossary with grasses, but probably not.)


Redo shrink() to instead allow testing two names against each other
while testing specific plural substitutions.  (But also keep the code
to throw out non-word characters from each.)  E.g.
is_same(name, 'z', 'zzes')

Detect when a glossary term is defined twice in the same file (or
definition) (e.g. a typo).

Allow iNaturalist taxon ID to be specified since iNaturalist fails for
shared genus names, e.g. onions (Allium).

Separate surprise_obs into multiple parts:
  species that don't have a page despite there being a genus page
    (or should it be all plant species that don't have a page?)
    (includes subspecies if the species page is missing.)
  subspecies that have a common name and a genus page (or are plants),
    but no page.
  subspecies that don't have a common name but are under a species
    for which subspecies are listed.


It'd be nice to link to a section of glossary words with the selected
one highlighted.  E.g. clicking "pedicel" would link to "Parts of a
flower" (highlighted in pale gray) with the "pedicel" entry
highlighted in yellow partway down the page.  This would require
Javascript for the yellow highlighting using extra information in the
URL, e.g. flower%20glossary.html?term=pedicel#parts+of+a+flower.  A
mobile screen is often too small for the section (especially if it
includes figures, but even without them).  Is some other solution
possible to indicate that the linked term is part of a section?

Now that glossary terms are flagged when used out of place, try moving
many of the plant glossary entries to the flower glossary.  Perhaps a
command-line arg could flag glossary terms that are never used in the
'plant glossary' context.


Use img property alt="" to indicate to blind users that a description
of the photo is not helpful?

I've removed the search penalty for autopropagated and unobserved pages.
I should also order them lower in pages.js.


Make the hierarchy more generic to fit anyone's taxonomic priorities:

'is_top' marks a page as being the top of a hierarchy.  Any
descendents of this page or pages that list this one as a higher-level
group are considered part of its hierarchy, so they won't be assigned
a hierarchy as per below.

'default_ancestor' marks a page as being the top of a hierarchy, *and*
any hierarchies that don't have an 'is_top' root are considered to be
part of its hierarchy.  Only one page can be marked
'default_ancestor'.  Does *not* imply 'is_top'.  E.g. flowering plants
may be the 'default_ancestor' while being under vascular plants, etc.

When checking ancestor properties, a page searches up through all
parents and also through all resolved groups from observations.csv.
In addition, a variety/subspecies is deemed to be a member of its
species, and a species is deemed to be a member of its genus,
regardless of observations.csv entries.

'create: <rank>' allows descendents to be added at the specified rank,
e.g. 'create: family'.  Pages are thus created automatically from
observations.csv.  Implies 'list: <rank>'.  This may be the hardest
property to handle in order to build a hierarchy in the correct order.
Perhaps iterate through each rank from bottom to top.  For each top of
hierarchy, check if it can and should create a page at the current
rank, and then do so.  (can = has a resolved group; should = has an
ancestor among resolved groups with the necessary 'create' property.)
At the same time, add parent/child relationships based on 'create',
'list', and 'hierarchy'.

'list: self' marks a page to allow children to be added via group
identification.  Otherwise, a group with incomplete children flags an
error.  'list: <rank>' allows children to be added to all descendents
that are the specified rank.

'require: <rank>' requires descendents below the specified rank to
have an ancestor at the specified rank, e.g. 'require: family'
requires that all flowers have a family.  Often accompanies but does
not require 'create: <rank>'.  If 'create: <rank>' is not specified,
the appropriate hierarchy must be created by hand.

'complete: <rank>' requires that any descendent page of the specified
rank must have as descendents all pages under that page's group.
I.e. if a page is a member of a 'complete' page, it must be an
explicit descendent.  Additionally, if at least two pages exist for a
group of the specified rank, the page for the group must exist.
E.g. 'complete: genus'

'hierarchy: self' marks a page to have its whole hierarchy listed.
Implies 'list: self' (below)?  'hierarchy: <rank>' is less useful to
me, but could perhaps be supported if easy.

'membership: self' causes all descendents to list themselves as a
member of the page.

'membership: <rank>' causes all descendents below the specified rank
to list themselves as a member of their ancestor at the specified
rank.  E.g. 'membership: family'.

Suppress write_lists for hierarchy above genus, e.g. in flowering plants.


Create a function to easily compare ranks beyond just genus/species.
Flag an error for unknown ranks when the sci name is "[rank] [Name]".

When specifying <rank> as part of a property, <rank> can be a range,
e.g. 'genus-family'.  The range can be in either order,
e.g. 'family-genus'.  Additional ranks/ranges can be specified,
e.g. 'genus, species, subspecies'.  If a page doesn't have a rank
(e.g. because it doesn't have a scientific name), it is considered
part of a range if it has both a parent and a child within the range.

<rank> can also be 'self', which refers to the marked page's rank.  If
the marked page doesn't have an explicit rank (e.g. because it doesn't
have a scientific name), it still marks itself, but only for
properties that can be performed on a complete hierarchy
(e.g. 'membership'), not properties that require group identification.

Rank properties are searched from a page as follows:
  - Recurse upwards through the hierarchy, including all choices of parent.
  - If the property is found, return the specified rank range through the recursion.
  - Any page that is in the rank range and any assigned group that is in the rank range is added to a list that is also returned.
  - The final result is a list of names (of pages that don't exist) and/or pages (that do exist) and/or ranks that weren't found.
  - E.g. [('genus', <Page>), ('tribe', None), ('family', 'Roseaceae')]
  - The list is preferably in rank order.
  - The list can include the page that specifies the property.
  - The list can include the page that initiated the search.

How the list is used:
  - create is only searched for from a top of tree.
    if the first page on the result list doesn't exist, it is created,
      and the former top of tree is added as a child.
    if the first page on the result list does exist, the former top of tree
      is added as a child.
  - list: as the last line above for create.
  - require throws an error if any ranks weren't found
  - complete does the the following:
    if any page on the result list doesn't exist, we note its name in a set.
      if its name was already put in the set by another page, throw an error.
    if any page on the result list does exist, verify that it is an ancestor
      in the hierarchy.
    what should we do if no page is known for the indicated rank?
  - hierarchy is applied if the page itself is in the list (first).
  - membership lists the page as a member of all existing pages in the list.


'subset: color/<color>/<name> creates a page <name> with a hierarchical
list of all descendents with color <color>.  These pages are outside
the normal hierarchy.

Add manual links to the color pages from the flowering plants page.
This implies that its txt is output.  However, when children are
assigned to it, its hierarchy property prevents the children from
being added to its txt.

Include color pages (e.g. yellow flowers) in search.

List color on flower pages as "member of [color] flowers"?  (That gets
awkward with multiple colors.)

ryegrass's lists doesn't include 'other flowers' because it has
exactly one child with color 'other'.  That is dumb, and it should be
listed with color 'other' even if doesn't appear on the list page.


Format glossary ToC better so that it is clearly a part of the
"Glossary table of contents", especially when "plant glossary" is the
current glossary and thus bold and not linked.

Instead of using index numbers as temporary child IDs, use the
scientific name (if available) or the common name.  These are
guaranteed to find the correct page later unless there is an error
elsewhere.  (Except that I might not know scientific names until
later.  Hm.)

To speed Javascript or CSS editing, allow a parameter to bawg.py to
reference src/search.js and src/bawg.css directly.  (But what about
index.html?)


Support searches for "help", "bawg", "bay area wildflower guilde",
"contact me".
